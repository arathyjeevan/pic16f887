#define _XTAL_FREQ 8000000

#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

#include <xc.h>
#include "LCD NEW HEADER.h";
#include <stdio.h>
#include <string.h>

// BEGIN CONFIG
#pragma config FOSC = HS // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF // Flash Program Memory Code Protection bit (Code protection off)
//END CONFIG
#include <htc.h>
#if defined(WDTE_OFF)
__CONFIG(WDTE_OFF & LVP_OFF);
#elif defined (WDTDIS)
__CONFIG(WDTDIS & LVPDIS);
#endif


char UART_Init(const long int baudrate)
{
	unsigned int x;
	x = (_XTAL_FREQ - baudrate*64)/(baudrate*64);
	if(x>255)
	{
		x = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
		BRGH = 1;
	}
	if(x<255)
	{
          SPBRG = x;
          SYNC = 0;
          SPEN = 1;
          TRISC7 = 1;
          TRISC6 = 0;
          CREN = 1;
          TXEN = 1;
	  return 1;
	}
	return 0;
}


char UART_TX_Empty()
{
  return TRMT;
}

void UART_Write(unsigned char data)
{
  while(!UART_TX_Empty());
  TXREG = data;
}

char UART_Data_Ready()
{
   return RCIF;
}

char UART_Read()
{
 
  while(!UART_Data_Ready());
  return RCREG;
}


void ADC_Init()
{
	ADCON0=0xC1;
	ADCON1=0x80;
}
unsigned int ADC_read(unsigned char channel)
{
	if (channel>13)
		return 0;
	else
	{
		ADCON0&=0xC3;
		ADCON0|=channel<<4;
		__delay_ms(2);
		GO_nDONE=1;
		while(GO_nDONE);
		return((ADRESH<<8)+ADRESL);
	}
}



void main(void){ 
    unsigned int a;
    TRISD = 0x00;
    Lcd_Init();
    ANSEL=1;
    TRISC0=1;
    TRISC1=1;
    TRISC2=1;
    TRISC3=1;
    UART_Init(9600);
    char Y;
    Y = UART_Read();
    TRISD0=0;
    
    if (Y=='X')
    {
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("ENTER PIN");
        int g[4]={1,1,1,1},b[4];
        int z=0,k=0,x=1;
        Lcd_Set_Cursor(2,2);
        char s[50];
        while(1){
            if (RC0==1)
            {
                z=z+1;
                sprintf(s,"%d",z);
                __delay_ms(1000);
                Lcd_Set_Cursor(2,x);
                Lcd_Write_String(s);
                b[k]=z;
            }
            else if (RC1==1)
            {
                x=x+1;
                k=k+1;
                __delay_ms(500);
                z=0;
            }
            else if (RC2==1)
            {
                z=z-1;
                sprintf(s,"%d",z);
                __delay_ms(1000);
                Lcd_Set_Cursor(2,x);
                Lcd_Write_String(s);

            }
            else if (RC3==1)
            {

                if (g[0]==b[0]&&g[1]==b[1]&&g[2]==b[2]&&g[3]==b[3])  
                {
                    Lcd_Clear();
                    __delay_ms(1000);
                    Lcd_Set_Cursor(1,1);
                    Lcd_Write_String("access granted");
                    ADC_Init();
                    TRISD = 0x00;
                    TRISA = 0xFF;
                    TRISC = 0x00;
                    unsigned int r,s;
                    int i;
                    char p[5];
                    r= ADC_read(0);
                    s=r*0.49;
                    char w[10];
                    sprintf(w,"%d",s);    
                    Lcd_Set_Cursor(2,1);
                    Lcd_Write_String(w);
                    Lcd_Write_String("C");
                    __delay_ms(10000);
                    break;
                }
                else
                {
                    Lcd_Clear();
                    Lcd_Set_Cursor(1,1);
                    Lcd_Write_String("access denied");
                    __delay_ms(10000);
                    Lcd_Clear();
                    Lcd_Set_Cursor(1,1);
                    Lcd_Write_String("enter pin");
                    z=0,k=0,x=1;
                }    
            }
     
        
    }

}
    
}
