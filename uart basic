#define _XTAL_FREQ 8000000
#include <xc.h>


// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC=HS// Oscillator Selection bits (INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.









char UART_Init(const long int baudrate)
{
	unsigned int x;
	x = (_XTAL_FREQ - baudrate*64)/(baudrate*64);
	if(x>255)
	{
		x = (_XTAL_FREQ - baudrate*16)/(baudrate*16);
		BRGH = 1;
	}
	if(x<255)
	{
          SPBRG = x;
          SYNC = 0;
          SPEN = 1;
          TRISC7 = 1;
          TRISC6 = 0;
          CREN = 1;
          TXEN = 1;
	  return 1;
	}
	return 0;
}


char UART_TX_Empty()
{
  return TRMT;
}

void UART_Write(unsigned char data)
{
  while(!UART_TX_Empty());
  TXREG = data;
}

char UART_Data_Ready()
{
   return RCIF;
}

char UART_Read()
{
 
  while(!UART_Data_Ready());
  return RCREG;
}



void main()
{
    UART_Init(9600);
    char a;
    a = UART_Read();
    TRISD0=0;
    
    if (a=='X')
    {
        RD0=1;
    }    
}
